{"version":3,"sources":["Recipe.js","Navbar.js","RecipeInput.js","RecipeList.js","RecipeApp.js","serviceWorker.js","index.js"],"names":["Recipe","_this$props","this","props","title","img","instructions","id","onDelete","ingredients","map","ing","index","react_default","a","createElement","key","className","src","alt","type","onClick","Component","Navbar","onNewRecipe","defaultProps","RecipeInput","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleNewIngredient","handleChangeIng","handleSubmit","e","setState","defineProperty","target","name","value","concat","toConsumableArray","Number","split","i","preventDefault","onSave","objectSpread","_this2","_this$state","onClose","inputs","size","autoComplete","placeholder","onChange","onSubmit","htmlFor","style","marginTop","rows","cols","alignSelf","marginRight","RecipeList","recipes","r","src_Recipe_0","assign","RecipeApp","nextRecipeId","showForm","handleSave","recipe","prevState","newRecipe","nextRecipeID","filter","_this3","src_Navbar_0","src_RecipeInput_0","src_RecipeList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_RecipeApp_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d9a4357.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Recipe.css';\n\nclass Recipe extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    ingredients: PropTypes.arrayOf(PropTypes.string).isRequired,\n    instructions: PropTypes.string.isRequired,\n    img: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    onDelete: PropTypes.func.isRequired\n  }\n  \n  render() {\n    const {title, img, instructions, id, onDelete} = this.props;\n    const ingredients = this.props.ingredients.map((ing, index) => (\n      <li key={index}>{ing}</li> \n    ));\n    return (\n      <div className=\"recipe-card\">\n        <div className=\"recipe-card-img\">\n          <img src={img} alt={title} />\n        </div>\n        <div className=\"recipe-card-content\">\n          <h3 className=\"recipe-title\">{title}</h3>\n          <h4>Ingredients:</h4>\n          <ul>\n            {ingredients}\n          </ul>\n          <h4>Instructions:</h4>\n          <p>{instructions}</p>\n          <button type=\"button\" onClick={() => onDelete(id)}>DELETE</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Recipe;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nclass Navbar extends Component {\n  static defaultProps = {\n    onNewRecipe () {}\n  }\n  \n  static propTypes = {\n    onNewRecipe: PropTypes.func\n  }\n  \n  render() {\n    return (\n      <header>\n        <h2><a>Recipe App</a></h2>\n        <nav>\n          <li><a onClick={this.props.onNewRecipe}>New Recipe</a></li>\n          <li><a>Home</a></li>\n          <li><a>About</a></li>\n          <li><a>Contact Us</a></li>\n        </nav>\n      </header>\n    );\n  }\n}\n\nexport default Navbar;","import React, {Component} from 'react';\nimport './RecipeInput.css'\n\nclass RecipeInput extends Component {\n    static defaultProps = {\n        onClose() {},\n        onSave() {}\n    }\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            instructions: \"\",\n            ingredients: [''],\n            img: ''\n        };\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.handleNewIngredient = this.handleNewIngredient.bind(this);\n        this.handleChangeIng = this.handleChangeIng.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    handleChange(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n    \n    handleNewIngredient(e) {\n        const {ingredients} = this.state;\n        this.setState({ingredients: [...ingredients, '']});\n    }\n    \n    handleChangeIng(e) {\n        const index= Number(e.target.name.split('-')[1]); //Number will consider it as a number instead than a string\n        const ingredients = this.state.ingredients.map((ing,i) => (\n            i === index ? e.target.value : ing \n        ));\n        this.setState({ingredients});\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onSave({...this.state});\n        this.setState({\n            title: '',\n            instructions: \"\",\n            ingredients: [''],\n            img: ''\n        })\n    }\n    \n    render() {\n        const {title,instructions, img, ingredients} = this.state;\n        const {onClose} = this.props;\n        let inputs = ingredients.map((ing, i) => (\n            <div\n                className=\"recipe-form-line\"\n                key={`ingredient-${i}`}>\n                <label>{i+1}.\n                    <input\n                        type=\"text\"\n                        name={`ingredient-${i}`}\n                        value={ing}\n                        size={45}\n                        autoComplete=\"off\"\n                        placeholder=\" Ingredient\"\n                        onChange={this.handleChangeIng} />\n                </label>\n            </div>\n        \n        ));\n        \n        return (\n            <div className=\"recipe-form-container\">\n                <form className='recipe-form' onSubmit={this.handleSubmit}>\n                  <button\n                    type=\"button\"\n                    className=\"close-button\"\n                    onClick={onClose}\n                  >\n                    X\n                  </button>\n                  <div className='recipe-form-line'>\n                    <label htmlFor='recipe-title-input'>Title</label>\n                    <input\n                      id='recipe-title-input'\n                      key='title'\n                      name='title'\n                      type='text'\n                      value={title}\n                      size={42}\n                      autoComplete=\"off\"\n                      onChange={this.handleChange}/>\n                  </div>\n                  <label\n                    htmlFor='recipe-instructions-input'\n                    style={{marginTop: '5px'}}\n                  >\n                    Instructions\n                  </label>\n                  <textarea\n                    key='instructions'\n                    id='recipe-instructions-input'\n                    type='Instructions'\n                    name='instructions'\n                    rows='8'\n                    cols='50'\n                    autoComplete='off'\n                    value={instructions}\n                    onChange={this.handleChange}/>\n                  {inputs}\n                  <button\n                    type=\"button\"\n                    onClick={this.handleNewIngredient}\n                    className=\"buttons\"\n                  >\n                    +\n                  </button>\n                  <div className='recipe-form-line'>\n                    <label htmlFor='recipe-img-input'>Image Url</label>\n                    <input\n                      id='recipe-img-input'\n                      type='text'\n                      placeholder=''\n                      name='img'\n                      value={img}\n                      size={36}\n                      autoComplete='off'\n                      onChange={this.handleChange} />\n                  </div>\n                  <button\n                    type=\"submit\"\n                    className=\"buttons\"\n                    style={{alignSelf: 'flex-end', marginRight: 0}}\n                  >\n                    SAVE\n                  </button>\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default RecipeInput;","import React, {Component} from 'react';\nimport Recipe from './Recipe';\nimport PropTypes from 'prop-types';\nimport './RecipeList.css';\n\nclass RecipeList extends Component {\n  \n  static propTypes = {\n    recipes: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onDelete: PropTypes.func.isRequired\n  }\n  \n  render() {\n    const {onDelete} = this.props;\n    const recipes = this.props.recipes.map((r,index) => (\n      <Recipe key={r.id} {...r} onDelete={onDelete} /> //The last item will output the argument contained in each of the items.\n    ));\n    \n    return (\n      <div className=\"recipe-list\">\n        {recipes}\n      </div>\n    )\n  \n  }\n}\n\nexport default RecipeList;","import React, {Component} from 'react';\nimport Recipe from './Recipe';\nimport Navbar from './Navbar';\nimport RecipeInput from './RecipeInput';\nimport RecipeList from './RecipeList';\nimport './RecipeApp.css';\n\nclass RecipeApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [\n        {\n          id: 0,\n          title: \"Spaghetti\",\n          instructions: \"Open jar of Spaghetti sauce.  Bring to simmer.  Boil water.  Cook pasta until done.  Combine pasta and sauce\",\n          ingredients: [\"pasta\", \"8 cups water\", \"1 box spaghetti\"],\n          img: \"spaghetti.jpg\"\n        },\n        {\n          id: 1,\n          title: \"Milkshake\",\n          instructions: \"Combine ice cream and milk.  Blend until creamy\",\n          ingredients: [\"2 Scoops Ice cream\", \"8 ounces milk\"],\n          img: \"milkshake.jpg\"\n        },\n        {\n          id: 2,\n          title: \"Avocado Toast\",\n          instructions: \"Toast bread.  Slice avocado and spread on bread.  Add salt, oil, and pepper to taste.\",\n          ingredients: [\"2 slices of bread\", \"1 avocado\", \"1 tablespoon olive oil\", \"1 pinch of salt\", \"pepper\"],\n          img: \"avocado_toast.jpg\"\n        }\n      ],\n      nextRecipeId: 3,\n      showForm: false\n    }\n    this.handleSave = this.handleSave.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n  }\n  \n  handleSave(recipe) {\n    this.setState((prevState, props) => {\n      const newRecipe = {...recipe, id: this.state.nextRecipeId};\n      return {\n        nextRecipeID: prevState.nextRecipeId + 1,\n        recipes: [...this.state.recipes, newRecipe],\n        showForm: false\n      }\n    });\n  }\n  \n  onDelete(id) {\n    const recipes = this.state.recipes.filter(r => r.id !== id);\n    this.setState({recipes});\n    \n  }\n  \n  \n  render() {\n    const {showForm} = this.state;\n    return(\n      <div className=\"App\">\n        <Navbar onNewRecipe={() => this.setState({showForm: true})}/>\n        { showForm ? \n          <RecipeInput \n            onSave={this.handleSave}\n            onClose={() => this.setState({showForm: false})}\n          /> : \n          null }\n        <RecipeList onDelete={this.onDelete} recipes={this.state.recipes} />\n      </div>\n    );\n    \n  }\n}\n\nexport default RecipeApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RecipeApp from './RecipeApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RecipeApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}